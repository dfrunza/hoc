extern int GetStdHandle(int device_id);
extern void ExitProcess(int code);
extern char^ GetCommandLineA();
extern void WriteConsoleA(int console_handle, char^ buf, int chars_to_write_count, int^ chars_written_count, void^ reserved);

int stdout;
int stdin;
[10]char buf;
int buf_i;
int i;
int dummy;

void startup()
{
  /*
  */
  stdout = GetStdHandle(-11);
  stdin = GetStdHandle(-10);

  fizzbuzz(30);
}

void fizzbuzz(int n)
{
  if(n > 0)
  {
    int i; i = 1;
    while(i <= n)
    {
      if((i mod 15) == 0)
        print_str(&"fizzbuzz");
      else if((i mod 3) == 0)
        print_str(&"buzz");
      else if((i mod 5) == 0)
        print_str(&"fizz");
      else
        print_int(i);

      print_str(&"\n");
      i = i + 1;
    }
  }
}
/*
*/

/*
int gcd_iter(int a, int b)
{
  while(a <> b)
  {
    if(a > b)
      a = a - b;
    else
      b = b - a;
  }
  return a;
}

void fibo(int n)
{
  if(n > 0)
  {
    int f_1; f_1 = 0;
    int f_2; f_2 = 1;
    int f_n; f_n = f_1 + f_2;

    while(n > 0)
    {
      print_int(f_n);
      print_str(&"\n");

      f_n = f_2 + f_1;
      f_1 = f_2;
      f_2 = f_n;
      n = n - 1;
    }
  }
}

float absf(float a)
{
  if(a < 0.0)
    a = -a;
  return a;
}
*/

int abs(int a)
{
  if(a < 0)
    a = -a;
  return a;
}

void print_int(int i)
{
  [20]char buf;
  print_str(int_to_str(&buf, 20, i));
}


int strlen([]char str)
{
  int len; len = 0;
  while(str[len] <> '\0')
  {
    len = len + 1;
  }
  return len;
}

void print_str([]char str)
{
  int len; len = strlen(str);
  int chars_written_count; chars_written_count = 0;
  WriteConsoleA(stdout, str, len, &chars_written_count, (void^):0);
}

void digit_to_char([]char buf, int pos, int digit)
{
  if(digit == 0)
    buf[pos] = '0';
  else if(digit == 1)
    buf[pos] = '1';
  else if(digit == 2)
    buf[pos] = '2';
  else if(digit == 3)
    buf[pos] = '3';
  else if(digit == 4)
    buf[pos] = '4';
  else if(digit == 5)
    buf[pos] = '5';
  else if(digit == 6)
    buf[pos] = '6';
  else if(digit == 7)
    buf[pos] = '7';
  else if(digit == 8)
    buf[pos] = '8';
  else if(digit == 9)
    buf[pos] = '9';
  else
    buf[pos] = '?';
}

[]char int_to_str([]char buf, int buf_len, int i)
{
  int buf_i; buf_i = buf_len - 1;
  buf[buf_i] = '\0';

  bool is_negative; is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  int remainder; remainder = i mod 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i mod 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    buf[buf_i] = '-';
  }

  return buf + (char^):buf_i;
}
/*
*/

/*
[2]int A;
[2]int B;

int foo([]int A, []int B)
{
  int prod; prod = 0;
  int i; i = 0;

  while(i < 2)
  {
    prod = prod + A[i]*B[i];
    i = i + 1;
  }

  return prod;
}
*/

