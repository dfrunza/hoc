int max(int a, int b)
{
  int result = a;
  if(a < b)
    result = b;
  return result;
}

int min(int a, int b)
{
  int result = a;
  if(a > b)
    result = b;
  return result;
}

float maxf(float a, float b)
{
  float result = a;
  if(a < b)
    result = b;
  return result;
}

float minf(float a, float b)
{
  float result = a;
  if(a > b)
    result = b;
  return result;
}

int abs(int a)
{
  if(a < 0)
    a = -a;
  return a;
}

float absf(float a)
{
  if(a < 0.0)
    a = -a;
  return a;
}

int gcd_recurs(int a, int b)
{
  int result = a;
  if(b <> 0)
  {
    result = b;
    int r = a mod b;
    if(r == 0)
      result = b;
    else
      result = gcd_recurs(b, r);
  }
  return result;
}

int gcd_iter(int a, int b)
{
  while(a <> b)
  {
    if(a > b)
      a = a - b;
    else
      b = b - a;
  }
  return a;
}

/*
   Greatest Common Divisor
*/
int gcd(int a, int b)
{

  return gcd_recurs(abs(a), abs(b));
  /*
  return gcd_iter(abs(a), abs(b)); */
}

/*
   Least Common Multiple
*/
int lcm(int a, int b)
{
  return abs(a * b)/gcd(a, b);
}

float ipow(float a, int p)
{
  bool inv = (p < 0);
  p = abs(p);

  float result = 1.0;
  if(p <> 0)
  {
    while(p > 0)
    {
      result = result * a;
      p = p - 1;
    }
    if(inv)
      result = 1.0/result;
  }
  return result;
}

float sqrt_iter(float x, float g)
{
  float r = x/g;

  if(r <> g)
  {
    r = (r+g) / 2.0;
    if(absf(r-g) == 1.0)
      r = minf(r, g);
  }
  return r;
}

/*
   Computes the largest number 'r' such that 'r^r <= x'
*/
float sqrt(float x)
{
  float g = x;
  float r = 1.0;

  while((g > 0.0) and (g <> r))
  {
    g = r;
    r = sqrt_iter(x, g);
  }
  return g;
}

/*
   x = log_b(n) : the largest integer x such that
      pow(b, x) <= n
*/
int floor_log_b(int b, float n)
{
  int x = 0;
  float b_pow_x = 1.0;

  if(n > 1.0)
  {
    while(n >= b_pow_x)
    {
      x = x + 1;
      b_pow_x = ipow((float)cast b, x);
    }
    x = x - 1;
  }
  else if(n < 1.0)
  {
    while(b_pow_x > n)
    {
      b_pow_x = ipow((float)cast b, x);
      x = x - 1;
    }
    x = x + 1;
  }

  return x;
}

/*
   Converts a floating-point number in base-2 format to base-10 format.
   Returns the number of significand base-10 digits.
*/
int fp_bin_to_dec(float v, int^ significand, int^ exponent)
{
  float v_abs = absf(v);
  int x = floor_log_b(10, v_abs) + 1;
  ^exponent = x;

  int k = 0;
  float R = v_abs * ipow(10.0, -x);
  float M = ipow(2.0, -23) / 2.0;
  int U;

  do
  {
    k = k + 1;
    U = (int)cast (R * 10.0);
    R = (R * 10.0) - (float)cast U;
    M = M * 10.0;
    significand[k] = U;
  }
  while((R >= M) and (R <= (1.0 - M)));

  if(R <= 0.5)
    significand[k] = U;
  else
    significand[k] = U + 1;

  return k;
}


