var int stdout_handle = GetStdHandle(-11); /*STD_OUTPUT_HANDLE*/
var void* heap = VirtualAlloc((type void*)0, 4096, 12288/*MEM_COMMIT|MEM_RESERVE*/, 4/*PAGE_READWRITE*/);
var int heap_ptr = 0;

/*
proc void* hVirtualAlloc(
    void* address,
    int alloc_size,
    int alloc_type,
    int protect_flags)
{
  asm
  {
; protect_flags
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+12]
; alloc_type
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+8]
; alloc_size
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+4]
; address
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi]
call VirtualAlloc
push ebp
add dword ptr [esp], 28
pop edi
mov [edi], eax
  }
}
*/

/*
proc void hWriteConsole(
    int console_handle,
    char* buf,
    int chars_to_write_count,
    int* chars_written_count,
    void* reserved)
{
  asm
  {
; reserved
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+16]
; chars_written_count
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+12]
; chars_to_write_count
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+8]
; buf
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi+4]
; console_handle
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi]
call WriteConsoleA
  }
}
*/

/*
proc int hGetStdHandle(int device_id)
{
  asm
  {
; device_id
push ebp
add dword ptr [esp], 12
pop esi
push dword ptr [esi]
call GetStdHandle
; get the result
push ebp
add dword ptr [esp], 16
pop edi
mov [edi], eax
  }
}
*/

/*
proc char* hGetCommandLine()
{
  asm
  {
call GetCommandLineA
push ebp
add dword ptr [esp], 12
pop edi
mov [edi], eax
  }
}
*/

proc void* new(int size)
{
  var void* mem = heap + (type void*)heap_ptr;
  heap_ptr = heap_ptr + size;
  return mem;
}

main();

