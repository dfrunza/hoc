include "std.hoc";
include "str.hoc";
include "math.hoc";

char^ sloc_file_buf;
int sloc_file_buf_size;

char^ sloc_line_buf;
int sloc_line_buf_size;

void main()
{
  bool success = true;

  sloc_file_buf_size = 1*MEGABYTE;
  sloc_file_buf = (char^):alloc(sloc_file_buf_size);

  sloc_line_buf_size = 1*KILOBYTE;
  sloc_line_buf = (char^):alloc(sloc_line_buf_size);

  int file_count = 0;
  char^^ files = make_file_list(&file_count);

  int total_line_count = 0;

  int line_count = 0;
  int f = 0;
  while((f < file_count) and success)
  {
    success = sloc_count_lines(files[f], &line_count);
    if(success)
    {
      total_line_count = total_line_count + line_count;
    }
    f = f + 1;
  }

  print_int(total_line_count);
  print_str(&" lines");
}

char^^ make_file_list(int^ count)
{
  int max_file_count = 20;
  char^^ files = (char^^):alloc(4*max_file_count);
  int f = 0;

  files[f] = &"../src/hocc.h";
  f = f + 1;

  files[f] = &"../src/common.cpp";
  f = f + 1;

  files[f] = &"../src/hocc.cpp";
  f = f + 1;

  files[f] = &"../src/ir_gen.cpp";
  f = f + 1;

  files[f] = &"../src/lex.cpp";
  f = f + 1;

  files[f] = &"../src/sym.cpp";
  f = f + 1;

  files[f] = &"../src/syntax.cpp";
  f = f + 1;

  files[f] = &"../src/translate.cpp";
  f = f + 1;

  files[f] = &"../src/type.cpp";
  f = f + 1;

  files[f] = &"../src/x86_gen.cpp";
  f = f + 1;

  if(f < max_file_count)
    ^count = f;
  else
  {
    print_int(max_file_count);
    assert(&"max file count exceeded");
  }

  return files;
}

bool sloc_count_lines(char^ file_path, int^ line_count)
{
  bool success = true;
  ^line_count = 0;
  int file_size = 0;

  if(sloc_read_file(file_path, sloc_file_buf, &file_size))
  {
    int pos = 0;

    while((pos < file_size) and success)
    {
      success = sloc_read_line(sloc_file_buf, file_size, sloc_line_buf, sloc_line_buf_size, &pos);
      if(success)
      {
        if(sloc_line_buf[0] <> '\0')
        {
          ^line_count = ^line_count + 1;
        }
        else if(pos < file_size)
        {
          print_str(file_path);
          success = sloc_error(&"premature end of file");
        }
      }
    }
  }

  return success;
}

bool sloc_read_file(char^ file_path, char^ file_buf, int^ file_size)
{
  bool success = true;

  int file_handle = CreateFileA(file_path, GENERIC_READ, FILE_SHARE_READ, (void^):0, OPEN_EXISTING,
                                FILE_ATTRIBUTE_NORMAL, 0);
  if(file_handle <> INVALID_HANDLE_VALUE)
  {
    [2]int file_size_bigint;
    GetFileSizeEx(file_handle, &file_size_bigint);
    ^file_size = file_size_bigint[0];

    if(^file_size < sloc_file_buf_size)
    {
      int bytes_read = 0;

      if(ReadFile(file_handle, file_buf, sloc_file_buf_size-1, &bytes_read, (void^):0))
      {
        if(bytes_read == ^file_size)
        {
          file_buf[^file_size] = '\0';
        }
        else
        {
          print_str(file_path);
          success = sloc_error(&"read bytes not equal to file size");
        }
      }
      else
      {
        print_str(file_path);
        success = sloc_error(&"read file");
      }
    }
    else
    {
      print_str(file_path);
      success = sloc_error(&"file too big");
    }
  }
  else
  {
    print_str(file_path);
    success = sloc_error(&"open file");
  }

  return success;
}

bool sloc_error(char^ message)
{
  print_str(&"\nERROR : ");
  print_str(message);
  print_str(&"\n");

  return false;
}

bool sloc_read_line(char^  file_buf,
                    int    file_size,
                    char^  line_buf,
                    int    line_buf_size,
                    int^   pos)
{
  bool success = true;
  int i = ^pos;

  if(i < file_size)
  {
    char c = file_buf[i];

    while((c == '\n') or (c == '\r'))
    {
      i = i + 1;
      c = file_buf[i];
    }

    if(i < file_size)
    {
      int start_i = i;

      while((c <> '\n') and (c <> '\r') and (c <> '\0'))
      {
        i = i + 1;
        c = file_buf[i];
      }

      int end_i = i;
      int len = end_i - start_i;

      if(len < line_buf_size)
      {
        i = 0;

        while(i < len)
        {
          line_buf[i] = file_buf[start_i + i];
          i = i + 1;
        }

        line_buf[i] = '\0';
        ^pos = end_i;
      }
      else
        success = sloc_error(&"line too long");
    }
    else if(i == file_size)
    {
      line_buf[0] = '\0';
      ^pos = file_size;
    }
    else
      assert(&"read past buf size");
  }
  else
    assert(&"request to read past buf size");

  return success;
}

void DEBUG_print_int(char^ var_name, int value)
{
  print_str(var_name);
  print_str(&" = ");
  print_int(value);
  print_str(&"\n");
}

