proc int strlen(char* str)
{
  var int len = 0;
  while(*str != '\0')
  {
    str = str + 1;
    len = len + 1;
  }
  return len;
}

proc void print_str(char* str)
{
  while(*str != '\0')
  {
    putc(*str);
    str = str + 1;
  }
}

proc void digit_to_char(char* buf, int pos, int digit)
{
  if((digit >= 0) && (digit <= 9))
  {
    if(digit == 0)
      buf[pos] = '0';
    else if(digit == 1)
      buf[pos] = '1';
    else if(digit == 2)
      buf[pos] = '2';
    else if(digit == 3)
      buf[pos] = '3';
    else if(digit == 4)
      buf[pos] = '4';
    else if(digit == 5)
      buf[pos] = '5';
    else if(digit == 6)
      buf[pos] = '6';
    else if(digit == 7)
      buf[pos] = '7';
    else if(digit == 8)
      buf[pos] = '8';
    else if(digit == 9)
      buf[pos] = '9';
  }
}

proc char* int_to_str(char* buf, int buf_len, int i)
{
  var int buf_i = buf_len - 1;
  buf[buf_i] = '\0';

  var bool is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  var int remainder = i % 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i % 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    buf[buf_i] = '-';
  }

  return (buf + buf_i);
}

proc void print_int(int n)
{
  var [20]char str_buff;
  print_str(int_to_str(str_buff, 20, n));
}


