proc max(var a, var b)
{
  var result = a;
  if(a < b)
    result = b;
  return result;
}

proc min(var a, var b)
{
  var result = a;
  if(a > b)
    result = b;
  return result;
}

proc abs(var a)
{
  if(a < 0)
    a = -a;
  return a;
}

proc power(var a, var power)
{
  var p = power;
  var result = 1;
  while(p)
  {
    result = result*a;
    p = p-1;
  }
  return result;
}

/* Greatest Common Divisor */
proc gcd(var A, var B)
{
  var a = abs(A);
  var b = abs(B);
  var result = a;
  if(b != 0)
  {
    result = b;
    var r = a % b;
    if(r == 0)
      result = b;
    else
      result = gcd(b, r);
  }
  return result;
}

/* Least Common Multiple */
proc lcm(var a, var b)
{
  return abs(a*b)/gcd(a, b);
}

/* Prints the first 'n' Fibonacci numbers */
proc fibo(var n)
{
  if(n > 0)
  {
    var f1 = 0;
    var f2 = 1;
    var fn = f1 + f2;
    while(n)
    {
      print fn \n;
      fn = f2 + f1;
      f1 = f2;
      f2 = fn;
      n = n-1;
    }
  }
}

/*
   For all integers from 1 to 'n' print:
     -3 if it's divisible by 3
     -5 if it's divisible by 5
     -15 if it's divisible by 15
     else print the integer itself
*/
proc fizzbuzz(var n)
{
  if(n > 0)
  {
    while(n)
    {
      if((n % 15) == 0)
        print (-15)\n;
      else if((n % 3) == 0)
        print (-3)\n;
      else if((n % 5) == 0)
        print (-5)\n;
      else
        print n \n;

      n = n-1;
    }
  }
}

proc sqrt_iter(var x, var g)
{
  var r = x/g;
  if(r == g)
    return r;
  else
    return (r+g)/2;
}

/*
   Computes smallest number 'r' such that:
      r*r >= x
*/
proc sqrt_ceil(var x)
{
  var g = x;
  var r = 1;
  while(g && (g != r))
  {
    g = r;
    r = sqrt_iter(x, g);
  }
  if(g*g < x)
    g = g+1;
  return g;
}
