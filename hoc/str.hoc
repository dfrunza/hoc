proc int strlen(char* str)
{
  var int len = 0;
  while(*str != '\0')
  {
    str = str + (type char*)1;
    len = len + 1;
  }
  return len;
}

proc void print_str(char* str)
{
  while(*str != '\0')
  {
    /*putc(*str);*/
    str = str + (type char*)1;
  }
}

proc void init_intbuf(int* buf, int len, int val)
{
  var int i = 0;
  while(i < len)
  {
    buf[i] = val;
    i = i + 1;
  }
}

proc void digit_to_char(char* buf, int pos, int digit)
{
  if((digit >= 0) && (digit <= 9))
  {
    if(digit == 0)
      buf[pos] = '0';
    else if(digit == 1)
      buf[pos] = '1';
    else if(digit == 2)
      buf[pos] = '2';
    else if(digit == 3)
      buf[pos] = '3';
    else if(digit == 4)
      buf[pos] = '4';
    else if(digit == 5)
      buf[pos] = '5';
    else if(digit == 6)
      buf[pos] = '6';
    else if(digit == 7)
      buf[pos] = '7';
    else if(digit == 8)
      buf[pos] = '8';
    else if(digit == 9)
      buf[pos] = '9';
  }
}

proc char* int_to_str(char* buf, int buf_len, int i)
{
  var int buf_i = buf_len - 1;
  buf[buf_i] = '\0';

  var bool is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  var int remainder = i % 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i % 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    buf[buf_i] = '-';
  }

  return (buf + (type char*)buf_i);
}

proc void float_to_str(char* buf, int buf_len, float f)
{
  var [9]int significand; /* 0-th cell is not used */
  init_intbuf(significand, 9, 0);
  var int exponent = 0;

  var int digit_count = fp_bin_to_dec(f, significand, &exponent);

  var int pos = 0;

  if(f < 0.0)
  {
    buf[pos] = '-';
    pos = pos + 1;
  }

  var int i = 1;
  if(exponent <= 0)
  {
    buf[pos] = '0';
    pos = pos + 1;
    buf[pos] = '.';
    pos = pos + 1;
  }
  else
  {
    while((i <= digit_count) && (exponent > 0))
    {
      digit_to_char(buf, pos, significand[i]);
      i = i + 1;
      pos = pos + 1;
      exponent = exponent - 1;
    }

    buf[pos] = '.';
    pos = pos + 1;
    if(i > digit_count)
    {
      buf[pos] = '0';
      pos = pos + 1;
    }
  }

  while(i <= digit_count)
  {
    digit_to_char(buf, pos, significand[i]);
    i = i + 1;
    pos = pos + 1;
  }

  if(exponent != 0)
  {
    buf[pos] = 'e';
    pos = pos + 1;

    var [20]char exponent_buf;
    var char* exponent_str = "";
    exponent_str = int_to_str(exponent_buf, 20, exponent);
    while(*exponent_str != '\0')
    {
      buf[pos] = *exponent_str;
      exponent_str = exponent_str + (type char*)1;
      pos = pos + 1;
    }
  }

  buf[pos] = '\0';
}

proc void print_int(int i)
{
  var [20]char buf;
  print_str(int_to_str(buf, 20, i));
}

proc void print_float(float f)
{
  var [20]char buf;
  float_to_str(buf, 20, f);
  print_str(buf);
}

