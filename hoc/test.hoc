[10]char buf;
[]char s;
char c;

void startup()
{
  s = int_to_str(&buf, 10, -123);
  c = ^s;

  /*
  A[0] = 1;
  A[1] = 2;
  B[0] = 3;
  B[1] = 4;

  p = foo(&A, &B);
  */
}

[]char foo([]char buf)
{
  return buf + (char^):1;
}

int abs(int a)
{
  if(a < 0)
    a = -a;
  return a;
}

void digit_to_char([]char buf, int pos, int digit)
{
  if(digit == 0)
    buf[pos] = '0';
  else if(digit == 1)
    buf[pos] = '1';
  else if(digit == 2)
    buf[pos] = '2';
  else if(digit == 3)
    buf[pos] = '3';
  else if(digit == 4)
    buf[pos] = '4';
  else if(digit == 5)
    buf[pos] = '5';
  else if(digit == 6)
    buf[pos] = '6';
  else if(digit == 7)
    buf[pos] = '7';
  else if(digit == 8)
    buf[pos] = '8';
  else if(digit == 9)
    buf[pos] = '9';
  else
    buf[pos] = '?';
}

[]char int_to_str([]char buf, int buf_len, int i)
{
  int buf_i; buf_i = buf_len - 1;
  buf[buf_i] = '\0';

  bool is_negative; is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  int remainder; remainder = i mod 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i mod 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    buf[buf_i] = '-';
  }

  return buf + (char^):buf_i;
}
/*
*/

/*
char bar([]char s)
{
  return s[1];
}

[2]int A;
[2]int B;

int foo([]int A, []int B)
{
  int prod; prod = 0;
  int i; i = 0;

  while(i < 2)
  {
    prod = prod + A[i]*B[i];
    i = i + 1;
  }

  return prod;
}
*/

