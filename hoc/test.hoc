extern int GetStdHandle(int device_id);
extern void ExitProcess(int code);
extern char^ GetCommandLineA();
extern void WriteConsoleA(int console_handle, char^ buf, int chars_to_write_count, int^ chars_written_count, void^ reserved);

int stdout;
int stdin;

int n;
int a;
int b;
void startup()
{
  stdout = GetStdHandle(-11);
  stdin = GetStdHandle(-10);

  /*
  a = 123;
  b = 123;
  bool c;
  c = (a == b);
  */

  print_int(123);

  a = 10;
  b = 25;
  n = gcd(a, b);
  print_int(n);
}

/*
int gcd_iter(int a, int b)
{
  while(a <> b)
  {
    if(a > b)
      a = a - b;
    else
      b = b - a;
  }
  return a;
}
*/

int gcd_recurs(int a, int b)
{
  int result; result = a;
  if(b <> 0)
  {
    result = b;
    int r; r = a mod b;
    if(r == 0)
      result = b;
    else
      result = gcd_recurs(b, r);
  }
  return result;
}

int gcd(int a, int b)
{
  return gcd_recurs(abs(a), abs(b));
}

int abs(int a)
{
  if(a < 0)
    a = -a;
  return a;
}

/*
void init_intbuf([]int buf, int len, int val)
{
  int i; i = 0;
  while(i < len)
  {
    buf[i] = val;
    i = i + 1;
  }
}

void float_to_str(char^ buf, int buf_len, float f)
{
  [9]int significand;
  init_intbuf(&significand[0], 9, 0);
  int exponent; exponent = 0;

  int digit_count; digit_count = fp_bin_to_dec(f, &significand, &exponent);

  int pos; pos = 0;

  if(f < 0.0)
  {
    buf[pos] = '-';
    pos = pos + 1;
  }

  int i; i = 1;
  if(exponent <= 0)
  {
    buf[pos] = '0';
    pos = pos + 1;
    buf[pos] = '.';
    pos = pos + 1;
  }
  else
  {
    while((i <= digit_count) and (exponent > 0))
    {
      digit_to_char(buf, pos, significand[i]);
      i = i + 1;
      pos = pos + 1;
      exponent = exponent - 1;
    }

    buf[pos] = '.';
    pos = pos + 1;
    if(i > digit_count)
    {
      buf[pos] = '0';
      pos = pos + 1;
    }
  }

  while(i <= digit_count)
  {
    digit_to_char(buf, pos, significand[i]);
    i = i + 1;
    pos = pos + 1;
  }

  if(exponent <> 0)
  {
    buf[pos] = 'e';
    pos = pos + 1;

    [20]char exponent_buf;
    char^ exponent_str; exponent_str = int_to_str(&exponent_buf, 20, exponent);
    while(^exponent_str <> '\0')
    {
      buf[pos] = ^exponent_str;
      exponent_str = exponent_str + (char^):1;
      pos = pos + 1;
    }
  }

  buf[pos] = '\0';
}

void print_float(float f)
{
  [20]char buf;
  float_to_str(&buf, 20, f);
  print_str(&buf);
}
*/

float absf(float a)
{
  if(a < 0.0)
    a = -a;
  return a;
}

void print_int(int i)
{
  [20]char buf;
  print_str(int_to_str(&buf, 20, i));
}

int strlen([]char str)
{
  int len; len = 0;
  while(str[len] <> '\0')
  {
    len = len + 1;
  }
  return len;
}

void print_str([]char str)
{
  int len; len = strlen(str);
  int chars_written_count; chars_written_count = 0;
  WriteConsoleA(stdout, str, len, &chars_written_count, (void^):0);
}

void digit_to_char([]char buf, int pos, int digit)
{
  if(digit == 0)
    buf[pos] = '0';
  else if(digit == 1)
    buf[pos] = '1';
  else if(digit == 2)
    buf[pos] = '2';
  else if(digit == 3)
    buf[pos] = '3';
  else if(digit == 4)
    buf[pos] = '4';
  else if(digit == 5)
    buf[pos] = '5';
  else if(digit == 6)
    buf[pos] = '6';
  else if(digit == 7)
    buf[pos] = '7';
  else if(digit == 8)
    buf[pos] = '8';
  else if(digit == 9)
    buf[pos] = '9';
  else
    buf[pos] = '?';
}

[]char int_to_str([]char buf, int buf_len, int i)
{
  int buf_i; buf_i = buf_len - 1;
  buf[buf_i] = '\0';

  bool is_negative; is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  int remainder; remainder = i mod 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i mod 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    buf[buf_i] = '-';
  }

  return buf + (char^):buf_i;
}
/*
*/

/*
[2]int A;
[2]int B;

int foo([]int A, []int B)
{
  int prod; prod = 0;
  int i; i = 0;

  while(i < 2)
  {
    prod = prod + A[i]*B[i];
    i = i + 1;
  }

  return prod;
}
*/

