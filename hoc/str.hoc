int strlen(char^ str)
{
  int len; len = 0;
  while(^str <> '\0')
  {
    str = str + (char^):1;
    len = len + 1;
  }
  return len;
}

void print_str(char^ str)
{
  int len; len = strlen(str);
  int chars_written_count; chars_written_count = 0;
  /*WriteConsoleA(stdout, str, len, &chars_written_count, (void^):0);*/
}

void digit_to_char(char^ buf, int pos, int digit)
{
  if(digit == 0)
    ^(buf + (char^):pos) = '0';
  else if(digit == 1)
    ^(buf + (char^):pos) = '1';
  else if(digit == 2)
    ^(buf + (char^):pos) = '2';
  else if(digit == 3)
    ^(buf + (char^):pos) = '3';
  else if(digit == 4)
    ^(buf + (char^):pos) = '4';
  else if(digit == 5)
    ^(buf + (char^):pos) = '5';
  else if(digit == 6)
    ^(buf + (char^):pos) = '6';
  else if(digit == 7)
    ^(buf + (char^):pos) = '7';
  else if(digit == 8)
    ^(buf + (char^):pos) = '8';
  else if(digit == 9)
    ^(buf + (char^):pos) = '9';
  else
    ^(buf + (char^):pos) = '?';
}

char^ int_to_str(char^ buf, int buf_len, int i)
{
  int buf_i; buf_i = buf_len - 1;
  ^(buf + (char^):buf_i) = '\0';

  bool is_negative; is_negative = false;
  if(i < 0)
  {
    i = abs(i);
    is_negative = true;
  }

  buf_i = buf_i - 1;
  int remainder; remainder = i mod 10;
  digit_to_char(buf, buf_i, remainder);

  while(i > remainder)
  {
    buf_i = buf_i - 1;
    i = (i - remainder) / 10;
    remainder = i mod 10;
    digit_to_char(buf, buf_i, remainder);
  }

  if(is_negative)
  {
    buf_i = buf_i - 1;
    ^(buf + (char^):buf_i) = '-';
  }

  return (buf + (char^):buf_i);
}

void init_intbuf(int^ buf, int len, int val)
{
  int i; i = 0;
  while(i < len)
  {
    ^(buf + (int^):(i * 4)) = val;
    i = i + 1;
  }
}

void float_to_str(char^ buf, int buf_len, float f)
{
  [9]int significand; /* 0-th cell is not used */
  init_intbuf(&significand[0], 9, 0);
  int exponent; exponent = 0;

  int digit_count; digit_count = fp_bin_to_dec(f, &significand, &exponent);

  int pos; pos = 0;

  if(f < 0.0)
  {
    ^(buf + (char^):pos) = '-';
    pos = pos + 1;
  }

  int i; i = 1;
  if(exponent <= 0)
  {
    ^(buf + (char^):pos) = '0';
    pos = pos + 1;
    ^(buf + (char^):pos) = '.';
    pos = pos + 1;
  }
  else
  {
    while((i <= digit_count) and (exponent > 0))
    {
      digit_to_char(buf, pos, significand[i]);
      i = i + 1;
      pos = pos + 1;
      exponent = exponent - 1;
    }

    ^(buf + (char^):pos) = '.';
    pos = pos + 1;
    if(i > digit_count)
    {
      ^(buf + (char^):pos) = '0';
      pos = pos + 1;
    }
  }

  while(i <= digit_count)
  {
    digit_to_char(buf, pos, significand[i]);
    i = i + 1;
    pos = pos + 1;
  }

  if(exponent <> 0)
  {
    ^(buf + (char^):pos) = 'e';
    pos = pos + 1;

    [20]char exponent_buf;
    char^ exponent_str; exponent_str = int_to_str(&exponent_buf, 20, exponent);
    while(^exponent_str <> '\0')
    {
      ^(buf + (char^):pos) = ^exponent_str;
      exponent_str = exponent_str + (char^):1;
      pos = pos + 1;
    }
  }

  ^(buf + (char^):pos) = '\0';
}

void print_int(int i)
{
  [20]char buf;
  print_str(int_to_str(&buf, 20, i));
}

void print_float(float f)
{
  [20]char buf;
  float_to_str(&buf, 20, f);
  print_str(&buf);
}

void print_bool(bool b)
{
  if(b)
    print_str(&"true");
  else
    print_str(&"false");
}

