void swap(int^ data, int i, int j)
{
  if(i <> j)
  {
    int temp_val = data[i];
    data[i] = data[j];
    data[j] = temp_val;
  }
}

void insertion_sort(int^ array, int len)
{
  int i = 0;

  while(i < len)
  {
    int j = i;
    while(array[j] < array[j - 1])
    {
      swap(array, j, j - 1);
      j = j - 1;
    }
    i = i + 1;
  }
}

/* Returns -1 if all keys are equal.  */
int qs_find_pivot_index(int^ data, int start_index, int end_index)
{
  int index = -1;
  int i = start_index;

  while(i < end_index)
  {
    if(data[i] < data[i + 1])
    {
      index = i + 1;
      break;
    }
    else if(data[i] > data[i + 1])
    {
      index = i;
      break;
    }
    i = i + 1;
  }
  return index;
}

void quick_sort_recurs(int^ data, int i, int j)
{
  int pivot_index = qs_find_pivot_index(data, i, j);

  if(pivot_index >= 0)
  {
    int l = i;
    int r = j;
    int pivot = data[pivot_index];

    while(l < r)
    {
      swap(data, l, r);
      while(data[l] < pivot)
        l = l + 1;
      while(data[r] >= pivot)
        r = r - 1;
    }

    quick_sort_recurs(data, i, r);
    quick_sort_recurs(data, l, j);
  }
}

void quick_sort(int^ data, int len)
{
  quick_sort_recurs(data, 0, len - 1);
}

